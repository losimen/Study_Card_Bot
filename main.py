import telebot
import config
import time
from telebot import types

bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤—ñ—Ç, {0.first_name}!\n–Ø - <b>{1.first_name}</b> –±–æ—Ç, —è–∫–∏–π...'.format(message.from_user,
                                                                                              bot.get_me()),
                     parse_mode='html')
    main_menu(message)


@bot.message_handler(commands=['main_menu'])
def main_menu(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)

    button1 = types.KeyboardButton("–ü–æ—á–∞—Ç–∏ –≥—Ä—É")
    button2 = types.KeyboardButton("–¢–∞–±–ª–∏—Ü—è –≥—Ä–∞–≤—Ü—ñ–≤")
    button3 = types.KeyboardButton("–î–æ–ø–æ–º–æ–≥–∞")

    keyboard.add(button1, button2, button3)

    bot.send_message(message.chat.id, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n–û–±–µ—Ä–∏, —â–æ –±—É–¥–µ–º–æ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ", reply_markup=keyboard,
                     parse_mode='html')


@bot.message_handler(commands=['set_cards'])
def set_cards(message):
    user_stat = True
    # check if user is at the game
    if user_stat:
        questions = [None] * 5
        bot.send_message(message.chat.id, "–î–ª—è —Ç–æ–≥–æ, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ 5 –ø–∏—Ç–∞–Ω—å –¥–ª—è –æ–ø–æ–Ω–µ–Ω—Ç–∞:")

    else:
        bot.send_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞üòî\n–¢–æ–±—ñ —Å–ø–µ—Ä—à—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é",
                         parse_mode='html')

    main_menu(message)


@bot.message_handler(commands=['do_turn'])
def do_turn(message):
    user_stat = False
    # check if user is at the game
    if user_stat:
        # print user data
        pass
        # do turn
    else:
        bot.send_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞üòî\n–¢–æ–±—ñ —Å–ø–µ—Ä—à—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é",
                         parse_mode='html')


@bot.message_handler(content_types=['text'])
def any_text(message):
    if message.chat.type == "private":
        # check if user is at the game
        if False:
            bot.send_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞üòî\n–°–ø–µ—Ä—à—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ–ø–µ—Ä—ñ—à–Ω—é —Å–µ—Å—ñ—é",
                             parse_mode='html')

        if message.text == "–ü–æ—á–∞—Ç–∏ –≥—Ä—É":
            keyboard = types.InlineKeyboardMarkup(row_width=1)

            button1 = types.InlineKeyboardButton("–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é", callback_data='create_game')
            button2 = types.InlineKeyboardButton("–£–≤—ñ–π—Ç–∏ –¥–æ —Å–µ—Å—ñ—ó", callback_data='join_game')

            keyboard.add(button1, button2)

            bot.send_message(message.chat.id, "–û–±–µ—Ä–∏, —â–æ —Ç–æ–±—ñ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å", reply_markup=keyboard)
        elif message.text == "–¢–∞–±–ª–∏—Ü—è –≥—Ä–∞–≤—Ü—ñ–≤":
            bot.send_message(message.chat.id, "–°–∫–æ—Ä–æ...")
        elif message.text == "–î–æ–ø–æ–º–æ–≥–∞":
            bot.send_message(message.chat.id, "–ó–≤–µ—Ä–Ω–∏—Å—å –¥–æ: @lamens")
        else:
            bot.send_message(message.chat.id, "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ—ó –¥—ñ—ó  üòì")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline_room(call):
    try:
        if call.message:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text="–û–±–µ—Ä–∏, —â–æ —Ç–æ–±—ñ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å",
                                  reply_markup=None)

            if call.data == 'create_game':
                bot.send_message(call.message.chat.id, "<b>–î–æ–±—Ä–µ,üëÄ —Å—Ç–≤–æ—Ä—é—î–º–æ c–µ—Å—ñ—é...</b>", parse_mode='html')
                # creating session
                session_id = 0

                bot.send_message(call.message.chat.id,
                                 "–ö–æ–¥ —Ç–≤–æ—î—ó —Å–µ—Å—ñ—ó: {0}\n–©–æ–±–∏ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ü–µ–π –∫–æ–¥ –¥—Ä—É–≥—É\n–¢–æ–¥—ñ –≥—Ä–∞ —Ä–æ–∑–ø–æ—á–Ω–µ—Ç—å—Å—è".format(session_id),
                                 parse_mode='html')
                # wait until another user join session

                wait_counter = 10
                while False:
                    # check if another user joined
                    if True:
                        break

                    time.sleep(5)
                    wait_counter += 1
                # check if another user joined
                if True:
                    set_cards(call.message)
                else:
                    bot.send_message(call.message.chat.id,
                                     "–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è, –≤–∏–π—à–æ–≤. –í–∏–¥–∞–ª—è—é —Å–µ—Å—ñ—é".format(
                                         session_id),
                                     parse_mode='html')

            elif call.data == 'join_game':
                bot.send_message(call.message.chat.id, "<b>–ß—É–¥–æ–≤–æüëç, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–µ—Å—ñ—ó:</b>", parse_mode='html')

    except Exception as wht:
        print(repr(wht))


bot.polling(none_stop=True)
